// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
 id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  createdSubreddits Subreddit[]    @relation("CreatedBy")
  subscriptions     Subscription[]
  votes             Vote[]

  username String? @unique

  image       String?
  accounts    Account[]
  sessions    Session[]
  Post        Post[]
  Comment     Comment[]
  CommentVote CommentVote[]
}

model Subreddit {
  id String @id @default(cuid())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts Post[]
  creatorId String
  Creator User @relation(references: [id], fields: [creatorId])
  subcribers Subscription[]
  @@index([name])
}

model Post{
  id String @id @default(cuid())
  title String
  content Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author User @relation(fields: [authorId], references: [id])
  authorId String
  subreddit Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String
  comments Comment[]
  votes Vote[]
}

model Comment{
  id String @id @default(cuid())
  text String
  createdAt DateTime @default(now())
  author User @relation(fields: [authorId], references: [id])
  authorId String
  post Post @relation(fields: [postId], references: [id])
  postId String
  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}
model Account {
 id String @id @default(cuid())
 userId String
 type String
 provider String
 providerAccountId String
 refresh_token String? @db.text
 access_token String? @db.text
 expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])

}
model Session {
  id String @id @default(cuid())
  sessionToken String @unique
  userId String
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}
model Subscription {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String

  @@id([userId, subredditId])
}

model Vote {
  user User @relation(references: [id], fields: [userId])
  userId String
   post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type VoteType
  @@id([userId,postId])
}
model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
}

enum VoteType {
  UP
  DOWN
}